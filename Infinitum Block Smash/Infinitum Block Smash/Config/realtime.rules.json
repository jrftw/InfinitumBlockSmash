{
  "rules": {
    "users": {
      "$uid": {
        ".read": "auth != null",
        ".write": "auth != null && auth.uid === $uid",
        "username": {
          ".validate": "newData.isString() && newData.val().length >= 3 && newData.val().length <= 30"
        },
        "settings": {
          ".read": "auth.uid === $uid",
          ".write": "auth.uid === $uid"
        },
        "progress": {
          ".read": "auth.uid === $uid",
          ".write": "auth.uid === $uid"
        },
        "achievements": {
          ".read": "auth.uid === $uid",
          ".write": "auth.uid === $uid"
        }
      },
      ".read": true,
      ".write": "auth != null",
      ".indexOn": ["lastLogin", "lastActive"]
    },
    "game_states": {
      "$uid": {
        ".read": "auth.uid === $uid",
        ".write": "auth.uid === $uid"
      },
      ".indexOn": ["lastSaveTime", "lastUpdate"]
    },
    "online_users": {
      ".read": true,
      "$uid": {
        ".write": "auth != null && auth.uid === $uid",
        ".validate": "newData.isBoolean()"
      }
    },
    "daily_stats": {
      ".read": true,
      "players_today": {
        ".write": "auth != null",
        ".validate": "newData.isNumber() && newData.val() >= 0"
      },
      "last_reset": {
        ".write": "auth != null",
        ".validate": "newData.isNumber()"
      }
    },
    "classic_leaderboard": {
      "$period": {
        "scores": {
          "$uid": {
            ".read": true,
            ".write": "auth != null && auth.uid === $uid",
            ".validate": "newData.hasChildren(['score', 'timestamp'])",
            "score": { ".validate": "newData.isNumber() && newData.val() >= 0" },
            "timestamp": {
              ".validate": "newData.isNumber() || newData.child('.sv').val() === 'timestamp'"
            },
            "username": { ".validate": "newData.isString()" },
            "userId": { ".validate": "newData.isString() && newData.val() === auth.uid" }
          }
        },
        ".indexOn": ["score", "timestamp"]
      }
    },
    "classic_timed_leaderboard": {
      "$period": {
        "scores": {
          "$uid": {
            ".read": true,
            ".write": "auth != null && auth.uid === $uid",
            ".validate": "newData.hasChildren(['time', 'timestamp'])",
            "time": { ".validate": "newData.isNumber() && newData.val() >= 0" },
            "timestamp": {
              ".validate": "newData.isNumber() || newData.child('.sv').val() === 'timestamp'"
            },
            "username": { ".validate": "newData.isString()" },
            "userId": { ".validate": "newData.isString() && newData.val() === auth.uid" }
          }
        },
        ".indexOn": ["time", "timestamp"]
      }
    },
    "achievement_leaderboard": {
      "$period": {
        "scores": {
          "$uid": {
            ".read": true,
            ".write": "auth != null && auth.uid === $uid",
            ".validate": "newData.hasChildren(['points', 'timestamp'])",
            "points": { ".validate": "newData.isNumber() && newData.val() >= 0" },
            "timestamp": {
              ".validate": "newData.isNumber() || newData.child('.sv').val() === 'timestamp'"
            },
            "username": { ".validate": "newData.isString()" },
            "userId": { ".validate": "newData.isString() && newData.val() === auth.uid" }
          }
        },
        ".indexOn": ["points", "timestamp"]
      }
    },
    "leaderboards": {
      "$type": {
        "$period": {
          "scores": {
            "$uid": {
              ".read": true,
              ".write": "auth != null && auth.uid === $uid",
              ".validate": "newData.hasChildren(['score', 'timestamp'])",
              "score": { ".validate": "newData.isNumber() && newData.val() >= 0" },
              "timestamp": {
                ".validate": "newData.isNumber() || newData.child('.sv').val() === 'timestamp'"
              },
              "username": { ".validate": "newData.isString()" },
              "userId": { ".validate": "newData.isString() && newData.val() === auth.uid" }
            }
          },
          ".indexOn": ["score", "timestamp"]
        }
      }
    },
    "settings": {
      "$uid": {
        ".read": "auth.uid === $uid",
        ".write": "auth.uid === $uid"
      }
    },
    "devices": {
      "$deviceId": {
        ".read": "auth != null",
        ".write": "auth != null"
      }
    },
    "announcements": {
      "$announcementId": {
        ".read": true,
        ".write": false
      }
    },
    "bugs": {
      "$bugId": {
        ".read": true,
        ".write": false
      }
    },
    "security_logs": {
      "$logId": {
        ".read": false,
        ".write": "auth != null"
      }
    }
  }
}