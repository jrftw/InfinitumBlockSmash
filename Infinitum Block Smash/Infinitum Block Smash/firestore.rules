rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Rate limiting functions
    function isWithinRateLimit(limit, window) {
      return request.time > resource.data.lastWriteTime + duration.value(window, 's') ||
             resource.data.writeCount < limit;
    }
    
    function updateRateLimit() {
      return {
        lastWriteTime: request.time,
        writeCount: (resource.data.writeCount + 1)
      };
    }

    // Enhanced error handling
    function validateScore(score) {
      return score is number && 
             score >= 0 && 
             score <= 1000000; // Maximum reasonable score
    }

    function validateLevel(level) {
      return level is number && 
             level >= 1 && 
             level <= 100; // Maximum reasonable level
    }

    function validateTimestamp(timestamp) {
      return timestamp is number && 
             timestamp <= request.time.toMillis() &&
             timestamp >= request.time.toMillis() - duration.value(7, 'd');
    }

    function validateUsername(username) {
      return username is string && 
             username.size() >= 3 && 
             username.size() <= 30;
    }

    // Basic authentication check
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Ownership check for user-specific writes
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // App Check verification
    function hasValidAppCheck() {
      return request.app != null;
    }

    // Leaderboards - public read, authenticated write with rate limiting
    match /classic_leaderboard/{period}/scores/{userId} {
      allow read: if true;
      allow write: if isOwner(userId) && 
                   hasValidAppCheck() && 
                   validateScore(request.resource.data.score) &&
                   validateTimestamp(request.resource.data.timestamp) &&
                   isWithinRateLimit(10, 60); // 10 writes per minute
    }

    match /classic_timed_leaderboard/{period}/scores/{userId} {
      allow read: if true;
      allow write: if isOwner(userId) && hasValidAppCheck();
    }

    match /achievement_leaderboard/{period}/scores/{userId} {
      allow read: if true;
      allow write: if isOwner(userId) && hasValidAppCheck();
    }

    // User profiles - authenticated read, owner write with enhanced validation
    match /users/{userId} {
      allow read: if isAuthenticated() && hasValidAppCheck();
      allow write: if isOwner(userId) && 
                   hasValidAppCheck() &&
                   isWithinRateLimit(5, 60) && // 5 writes per minute
                   (request.resource.data.username == null || validateUsername(request.resource.data.username));
      
      // Achievements subcollection
      match /achievements/{achievementId} {
        allow read: if isAuthenticated() && hasValidAppCheck();
        allow write: if isOwner(userId) && hasValidAppCheck();
      }
      
      // Progress subcollection with enhanced validation
      match /progress/{progressId} {
        allow read: if isAuthenticated() && hasValidAppCheck();
        allow write: if isOwner(userId) && 
                     hasValidAppCheck() &&
                     validateScore(request.resource.data.score) &&
                     validateLevel(request.resource.data.level) &&
                     validateTimestamp(request.resource.data.lastSaveTime) &&
                     isWithinRateLimit(5, 60);
      }
    }

    // Game states with rate limiting
    match /game_states/{userId} {
      allow read: if isAuthenticated() && hasValidAppCheck();
      allow write: if isOwner(userId) && 
                   hasValidAppCheck() &&
                   isWithinRateLimit(20, 60); // 20 writes per minute
    }

    // Settings - authenticated read, owner write with App Check
    match /settings/{userId} {
      allow read: if isAuthenticated() && hasValidAppCheck();
      allow write: if isOwner(userId) && hasValidAppCheck();
    }

    // Devices collection - for referral tracking
    match /devices/{deviceId} {
      allow read: if isAuthenticated() && hasValidAppCheck();
      allow write: if isAuthenticated() && hasValidAppCheck();
    }

    // Default deny for all unknown paths
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 