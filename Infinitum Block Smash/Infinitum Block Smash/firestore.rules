rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Basic authentication check
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Ownership check for user-specific writes
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // App Check verification
    function hasValidAppCheck() {
      return request.app != null;
    }

    // Leaderboards - public read, authenticated write with App Check
    match /classic_leaderboard/{period}/scores/{userId} {
      allow read: if true;
      allow write: if isOwner(userId) && hasValidAppCheck();
    }

    match /classic_timed_leaderboard/{period}/scores/{userId} {
      allow read: if true;
      allow write: if isOwner(userId) && hasValidAppCheck();
    }

    match /achievement_leaderboard/{period}/scores/{userId} {
      allow read: if true;
      allow write: if isOwner(userId) && hasValidAppCheck();
    }

    // User profiles - authenticated read, owner write with App Check
    match /users/{userId} {
      allow read: if isAuthenticated() && hasValidAppCheck();
      allow write: if isOwner(userId) && hasValidAppCheck();
      
      // Achievements subcollection
      match /achievements/{achievementId} {
        allow read: if isAuthenticated() && hasValidAppCheck();
        allow write: if isOwner(userId) && hasValidAppCheck();
      }
      
      // Progress subcollection
      match /progress/{progressId} {
        allow read: if isAuthenticated() && hasValidAppCheck();
        allow write: if isOwner(userId) && hasValidAppCheck() &&
          request.resource.data.keys().hasAll(['score', 'level', 'blocksPlaced', 'linesCleared', 'gamesCompleted', 'perfectLevels', 'totalPlayTime', 'personalHighScore', 'personalHighestLevel', 'lastSaveTime']) &&
          request.resource.data.score is number && request.resource.data.score >= 0 &&
          request.resource.data.level is number && request.resource.data.level >= 1 &&
          request.resource.data.blocksPlaced is number && request.resource.data.blocksPlaced >= 0 &&
          request.resource.data.linesCleared is number && request.resource.data.linesCleared >= 0 &&
          request.resource.data.gamesCompleted is number && request.resource.data.gamesCompleted >= 0 &&
          request.resource.data.perfectLevels is number && request.resource.data.perfectLevels >= 0 &&
          request.resource.data.totalPlayTime is number && request.resource.data.totalPlayTime >= 0 &&
          request.resource.data.personalHighScore is number && request.resource.data.personalHighScore >= 0 &&
          request.resource.data.personalHighestLevel is number && request.resource.data.personalHighestLevel >= 1 &&
          request.resource.data.lastSaveTime is number;
      }
    }

    // Game states - authenticated read, owner write with App Check
    match /game_states/{userId} {
      allow read: if isAuthenticated() && hasValidAppCheck();
      allow write: if isOwner(userId) && hasValidAppCheck();
    }

    // Settings - authenticated read, owner write with App Check
    match /settings/{userId} {
      allow read: if isAuthenticated() && hasValidAppCheck();
      allow write: if isOwner(userId) && hasValidAppCheck();
    }

    // Devices collection - for referral tracking
    match /devices/{deviceId} {
      allow read: if isAuthenticated() && hasValidAppCheck();
      allow write: if isAuthenticated() && hasValidAppCheck();
    }

    // Default deny for all unknown paths
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 