rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidScore() {
      return (request.resource.data.score is number && request.resource.data.score >= 0) ||
             (request.resource.data.points is number && request.resource.data.points >= 0);
    }
    
    function isValidUsername() {
      let username = request.resource.data.username;
      return username is string 
        && username.size() >= 3 
        && username.size() <= 20
        && !username.matches('.*[^a-z0-9_].*')  // Only allow lowercase letters, numbers, and underscores
        && !username.matches('.*(admin|moderator|support).*');  // Prevent impersonation
    }

    function isValidGameProgress() {
      return request.resource.data.score is number &&
             request.resource.data.level is number &&
             request.resource.data.blocksPlaced is number &&
             request.resource.data.linesCleared is number &&
             request.resource.data.gamesCompleted is number &&
             request.resource.data.perfectLevels is number &&
             request.resource.data.totalPlayTime is number &&
             request.resource.data.highScore is number &&
             request.resource.data.highestLevel is number;
    }

    // Rate limiting functions
    function isNotRateLimited() {
      return !("lastUpdate" in resource.data) || request.time > resource.data.lastUpdate + duration.value(1, 'm');
    }

    function isNotLeaderboardRateLimited() {
      return !("lastUpdate" in resource.data) || request.time > resource.data.lastUpdate + duration.value(5, 'm');
    }

    function isValidTimestamp() {
      return request.resource.data.timestamp is timestamp &&
             request.time.toMillis() - request.resource.data.timestamp.toMillis() < duration.value(1, 'h').toMillis();
    }

    // New function to validate timeframe
    function isValidTimeframe(timeframe) {
      let today = request.time.toDate().toISOString().split('T')[0];
      let yesterday = (request.time - duration.value(1, 'd')).toDate().toISOString().split('T')[0];
      return timeframe == today || timeframe == yesterday;
    }

    // New function to check if entry is expired
    function isEntryExpired() {
      return request.time.toMillis() - resource.data.timestamp.toMillis() > duration.value(2, 'd').toMillis();
    }

    // USERS COLLECTION
    match /users/{userId} {
      allow read, write: if isOwner(userId);

      // All subcollections under users
      match /{document=**} {
        allow read, write: if isOwner(userId);
      }
    }

    // LEADERBOARD COLLECTION
    match /leaderboard/{docId} {
      allow read: if isAuthenticated();

      allow create: if request.auth.uid == request.resource.data.userId && 
                      isValidScore() &&
                      request.resource.data.timestamp is timestamp;

      allow update: if isAuthenticated() &&
                      resource.data.userId == request.auth.uid &&
                      request.resource.data.userId == request.auth.uid &&
                      request.resource.data.score > resource.data.score &&
                      isValidScore() &&
                      isNotLeaderboardRateLimited() &&
                      !isEntryExpired();

      allow delete: if isAuthenticated() && isEntryExpired();
    }

    // CLASSIC LEADERBOARD
    match /classic_leaderboard/{timeframe} {
      match /scores/{userId} {
        allow read: if isAuthenticated();
        allow write: if isAuthenticated() &&
                       isValidScore() &&
                       isNotLeaderboardRateLimited() &&
                       isValidTimestamp() &&
                       isValidTimeframe(timeframe);
        allow delete: if isAuthenticated() && isEntryExpired();
      }
    }

    // ACHIEVEMENT LEADERBOARD
    match /achievement_leaderboard/{timeframe} {
      match /scores/{userId} {
        allow read: if isAuthenticated();
        allow write: if isAuthenticated() &&
                       isValidScore() &&
                       isNotLeaderboardRateLimited() &&
                       isValidTimestamp() &&
                       isValidTimeframe(timeframe);
        allow delete: if isAuthenticated() && isEntryExpired();
      }
    }

    // TIMED LEADERBOARD
    match /classic_timed_leaderboard/{timeframe} {
      match /scores/{userId} {
        allow read: if isAuthenticated();
        allow write: if isAuthenticated() &&
                       isValidScore() &&
                       isValidTimestamp() &&
                       isValidTimeframe(timeframe);
        allow delete: if isAuthenticated() && isEntryExpired();
      }
    }

    // SETTINGS COLLECTION
    match /settings/{docId} {
      allow read, write: if isAuthenticated();
    }

    // ANALYTICS COLLECTION
    match /analytics/{docId} {
      allow read, write: if isAuthenticated();
    }
  }
} 